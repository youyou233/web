{
  "ver": "1.0.27",
  "uuid": "ea60de22-9e74-498c-b648-8f91e6990371",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec2 size;\nuniform float amount;\nuniform float cellSize;\nuniform float rotation;\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float ratio=cellSize/size.y;\n  float _rad=radians(rotation);\n  vec2 centerUV=vec2(v_uv0.x-0.5,0.5-v_uv0.y);\n  centerUV.x*=size.x/size.y;\n  centerUV=vec2((centerUV.x*cos(_rad)-centerUV.y*sin(_rad)),centerUV.x*sin(_rad)+centerUV.y*cos(_rad));\n  float _amount=amount*2.0+1.0;\n  float _h=min((1.6429*amount-0.6429)*3.6,120.0);\n  float _toRadius=3.14/(2.0*amount*ratio);\n  float _result=0.0;\n  for(float i=0.0;i<100.0;i+=1.0){\n    if(i>=_amount)break;\n     float _dis=i-amount;\n     float _distance=floor(_dis)*ratio;\n     float _disToLineY=abs(centerUV.y-_distance);\n     float _disToLineX=abs(centerUV.x-_distance);\n     float _cosA=cos(_distance*_toRadius)*_h/size.y;\n     if(abs(centerUV.x)<amount*ratio){\n      float _isInY=step(_disToLineY,cos(centerUV.x*_toRadius)*_cosA);\n      _result+=_isInY;\n      if(_result>=1.0)break;\n     }\n     if(abs(centerUV.y)<amount*ratio){\n      float _isInX=step(_disToLineX,cos(centerUV.y*_toRadius)*_cosA);\n      _result+=_isInX;\n      if(_result>=1.0)break;\n     }\n  }\n  o *= v_color;\n  o.a*=_result;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform blocku{\n  vec2 size;\n  float amount;\n  float cellSize;\n  float rotation;\n};\nvoid main () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    o.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    o.a *= texture_tmp.a;\n  #else\n    o *= texture_tmp;\n  #endif\n  #endif\n  float ratio=cellSize/size.y;\n  float _rad=radians(rotation);\n  vec2 centerUV=vec2(v_uv0.x-0.5,0.5-v_uv0.y);\n  centerUV.x*=size.x/size.y;\n  centerUV=vec2((centerUV.x*cos(_rad)-centerUV.y*sin(_rad)),centerUV.x*sin(_rad)+centerUV.y*cos(_rad));\n  float _amount=amount*2.0+1.0;\n  float _h=min((1.6429*amount-0.6429)*3.6,120.0);\n  float _toRadius=3.14/(2.0*amount*ratio);\n  float _result=0.0;\n  for(float i=0.0;i<100.0;i+=1.0){\n    if(i>=_amount)break;\n     float _dis=i-amount;\n     float _distance=floor(_dis)*ratio;\n     float _disToLineY=abs(centerUV.y-_distance);\n     float _disToLineX=abs(centerUV.x-_distance);\n     float _cosA=cos(_distance*_toRadius)*_h/size.y;\n     if(abs(centerUV.x)<amount*ratio){\n      float _isInY=step(_disToLineY,cos(centerUV.x*_toRadius)*_cosA);\n      _result+=_isInY;\n      if(_result>=1.0)break;\n     }\n     if(abs(centerUV.y)<amount*ratio){\n      float _isInX=step(_disToLineX,cos(centerUV.y*_toRadius)*_cosA);\n      _result+=_isInX;\n      if(_result>=1.0)break;\n     }\n  }\n  o *= v_color;\n  o.a*=_result;\n  ALPHA_TEST(o);\n  #if USE_BGRA\n    gl_FragColor = o.bgra;\n  #else\n    gl_FragColor = o.rgba;\n  #endif\n}"
      }
    }
  ],
  "subMetas": {}
}