{
  "ver": "1.0.27",
  "uuid": "9557edbd-1c82-4666-9c59-caa4f4fdd5ca",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nvarying vec4 v_color;\nuniform sampler2D texture;\n#endif\nuniform vec2 u_resolution;\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < 4; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;\n    vec4 color0 = vec4(1.0, 1.0, 1.0, 1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color0.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color0.a *= texture_tmp.a;\n  #else\n    color0 *= texture_tmp;\n  #endif\n  #endif\n  #if USE_TINT\n  color0 *= v_color;\n  #endif\n    vec3 color = vec3(1.);\n    vec2 q = vec2(0.);\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,5.2)+ 0.25*cc_time.x );\n    r.y = fbm( st + 1.0*q + vec2(6.3,2.8)+ 0.126*cc_time.x);\n    float f = fbm(st+r);\n    gl_FragColor = vec4((f*f*f+.99*f*f+.99*f)*color,color0.a)*v_color;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\n#if USE_TEXTURE\nin vec2 v_uv0;\nin vec4 v_color;\nuniform sampler2D texture;\n#endif\nuniform ARGS{\n  vec2 u_resolution;\n};\nfloat random (in vec2 _st) {\n    return fract(sin(dot(_st.xy,\n                        vec2(12.9898,78.233)))*\n        43758.5453123);\n}\nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < 4; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\nvoid main() {\n    vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;\n    vec4 color0 = vec4(1.0, 1.0, 1.0, 1.0);\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color0.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color0.a *= texture_tmp.a;\n  #else\n    color0 *= texture_tmp;\n  #endif\n  #endif\n  #if USE_TINT\n  color0 *= v_color;\n  #endif\n    vec3 color = vec3(1.);\n    vec2 q = vec2(0.);\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,5.2)+ 0.25*cc_time.x );\n    r.y = fbm( st + 1.0*q + vec2(6.3,2.8)+ 0.126*cc_time.x);\n    float f = fbm(st+r);\n    gl_FragColor = vec4((f*f*f+.99*f*f+.99*f)*color,color0.a)*v_color;\n}"
      }
    }
  ],
  "subMetas": {}
}