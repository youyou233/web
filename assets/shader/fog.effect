// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        u_resolution: { value: [1280,720] }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  #include <alpha-test>
  #include <texture>
  #include <cc-global>

 

  #if USE_TEXTURE
  in vec2 v_uv0;
  in vec4 v_color;
  uniform sampler2D texture;
  #endif

  uniform ARGS{
    vec2 u_resolution;
  };

  // // Plot a line on Y using a value between 0.0-1.0
  // float plot(vec2 st) {    
  //     return smoothstep(0.02, 0.0, abs(st.y - st.x));
  // }

  //绘制渐变
  // void main () {
  //   vec4 o = vec4(1, 1, 1, 1);

  //   #if USE_TEXTURE
  //     CCTexture(texture, v_uv0, o);
  //   #endif

  //   vec2 st = v_uv0.xy; //st.x  是从0-1 所以，看到的图像就是   从左到右渐变
   
  //   vec3 color = vec3(st.x);
  //   gl_FragColor = vec4(color,1.0);
  // }

  //绘制直线
  // void main() {
	//   vec2 st = v_uv0.xy;

  //   // float y = st.x;
  //   // vec3 color = vec3(y);

  //   vec3 color = vec3(st.x,st.x,st.x);

  //   // y = x;

  //   float pct = plot(st);
  //   color = pct*vec3(1.0,0.0,0.0);

	//   gl_FragColor = vec4(color,1.0);
  // }

  // #ifdef GL_ES
  // precision mediump float;
  // #endif

  // // Plot a line on Y using a value between 0.0-1.0
  // float plot(vec2 st) {    
  //     return smoothstep(0.02, 0.0, abs(st.y - st.x));
  // }

  // void main() {
  //   // vec2 u_resolution = vec2(1280,720);
  //   vec2 st = gl_FragCoord.xy/u_resolution;

  //     float y = st.x;

  //     vec3 color = vec3(y);

  //     // Plot a line
  //     float pct = plot(st);
  //     color = (1.0-pct)*color+pct*vec3(0.0,1.0,0.0);

  //   gl_FragColor = vec4(color,1.0);
  // }

  // const float line_width = 10.0; // 线宽
  // vec3 line_color = vec3(1.0, 0.4, 0.0); // 线的颜色
  // vec3 background_color = vec3(0.0); // 背景的颜色

  // void main()
  // {
  //   float delta = line_width * 0.001;
  //   float x = v_uv0.x;
  //   float y = 1.0 - v_uv0.y;

  //   float line_y = smoothstep(0.0, 1.0, x);

  //   if (abs(y - line_y) <= delta){
  //       gl_FragColor = vec4(line_color, 1.0);
  //   }
  //   else{
  //       gl_FragColor = vec4(background_color, 1.0);
  //   }
  // }

  // #ifdef GL_ES
  // precision mediump float;
  // #endif

  // uniform vec2 u_resolution;
  // uniform float u_time;

  float random (in vec2 _st) {
      return fract(sin(dot(_st.xy,
                          vec2(12.9898,78.233)))*
          43758.5453123);
  }

// Based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
  float noise (in vec2 _st) {
      vec2 i = floor(_st);
      vec2 f = fract(_st);

      // Four corners in 2D of a tile
      float a = random(i);
      float b = random(i + vec2(1.0, 0.0));
      float c = random(i + vec2(0.0, 1.0));
      float d = random(i + vec2(1.0, 1.0));

      vec2 u = f * f * (3.0 - 2.0 * f);

      return mix(a, b, u.x) +
              (c - a)* u.y * (1.0 - u.x) +
              (d - b) * u.x * u.y;
  }

  #define NUM_OCTAVES 4

  float fbm ( in vec2 _st) {
      float v = 0.0;
      float a = 0.5;
      vec2 shift = vec2(100.0);
      // Rotate to reduce axial bias
      mat2 rot = mat2(cos(0.5), sin(0.5),
                      -sin(0.5), cos(0.50));
      for (int i = 0; i < NUM_OCTAVES; ++i) {
          v += a * noise(_st);
          _st = rot * _st * 2.0 + shift;
          a *= 0.5;
      }
      return v;
  }

  void main() {
      vec2 st = gl_FragCoord.xy/u_resolution.xy*3.;
      // st += st * abs(sin(u_time*0.1)*3.0);
      vec4 color0 = vec4(1.0, 1.0, 1.0, 1.0);
   
    #if USE_TEXTURE
   
    CCTexture(texture, v_uv0, color0);
     // color *= texture(texture, v_uv0);
    
    #endif
    #if USE_TINT
    color0 *= v_color;
    #endif

      vec3 color = vec3(1.);

      vec2 q = vec2(0.);
      // q.x = fbm( st + 0.00*cc_time.x);
      // q.y = fbm( st + vec2(1.0));

      vec2 r = vec2(0.);
      r.x = fbm( st + 1.0*q + vec2(1.7,5.2)+ 0.25*cc_time.x );
      r.y = fbm( st + 1.0*q + vec2(6.3,2.8)+ 0.126*cc_time.x);

      float f = fbm(st+r);


      // color = mix(vec3(0.051961,0.319608,0.336667),
      //             vec3(0.336667,0.336667,0.248039),
      //             clamp((f*f)*4.0,0.0,1.0));

      // color = mix(color,
      //             vec3(0,0,0.164706),
      //             clamp(length(q),0.0,1.0));

      // color = mix(color,
      //             vec3(0.366667,0.5,0.5),
      //             clamp(length(r.x),0.0,0.5));
   

      gl_FragColor = vec4((f*f*f+.99*f*f+.99*f)*color,color0.a)*v_color;
  }
}%