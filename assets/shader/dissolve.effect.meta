{
  "ver": "1.0.27",
  "uuid": "3230b752-99ef-44c9-aaaa-32340c5368bc",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1.0);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n precision highp float;\n#if USE_ALPHA_TEST\n#endif\n #if USE_TEXTURE\n varying vec2 v_uv0;\n varying vec4 v_color;\n uniform sampler2D texture;\n uniform float fade_pct;\n uniform vec4 addColor;\n #endif\n void main () {\n   vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n   #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n   #endif\n   #if USE_TINT\n   color *= v_color;\n   #endif\n   if(color.b < fade_pct) discard;\n   if(color.b < fade_pct + 0.1) {\n     color = color * vec4(0.92, 0.8, 0.3, color.a);\n   }\n   if(color.a>.0){\n     color = vec4(color.r+(addColor.r*color.a),color.g+(addColor.g*color.a),color.b+(addColor.b*color.a),color.a);\n   }\n   gl_FragColor = color;\n }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1.0);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n #if USE_TEXTURE\n in vec2 v_uv0;\n in vec4 v_color;\n uniform sampler2D texture;\n uniform ARGS {\n   float fade_pct;\n };\n uniform LAMYOUM_COM {\n   vec4 addColor;\n };\n #endif\n void main () {\n   vec4 color = vec4(1.0, 1.0, 1.0, 1.0);\n   #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n   #endif\n   #if USE_TINT\n   color *= v_color;\n   #endif\n   if(color.b < fade_pct) discard;\n   if(color.b < fade_pct + 0.1) {\n     color = color * vec4(0.92, 0.8, 0.3, color.a);\n   }\n   if(color.a>.0){\n     color = vec4(color.r+(addColor.r*color.a),color.g+(addColor.g*color.a),color.b+(addColor.b*color.a),color.a);\n   }\n   gl_FragColor = color;\n }"
      }
    }
  ],
  "subMetas": {}
}